{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["UppyUser","props","uppy","useUppy","Uppy","use","XHRUpload","endpoint","on","file","response","console","log","historyAppend","target","rel","href","body","data","name","theme","App","item","this","setState","history","state","bind","isLoggedIn","a","axios","get","className","action","method","htmlFor","id","type","value","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TASA,SAASA,EAASC,GAChB,IAAMC,EAAOC,aAAQ,WACnB,OAAO,IAAIC,KACNC,IAAIC,IAAW,CAAEC,SAAU,YAC3BC,GAAG,kBAAkB,SAACC,EAAMC,GAC3BC,QAAQC,IAAIF,GACZT,EAAMY,cAAc,mBAAGC,OAAQ,SAAUC,IAAK,sBAAuBC,KAAM,YAAcN,EAASO,KAAKC,KAAKC,KAAxF,SAA+FT,EAASO,KAAKC,KAAKC,cAI9I,OAAO,cAAC,IAAD,CAAWC,MAAO,OAAQlB,KAAMA,I,IAsC1BmB,E,kDAlCb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAKRY,cAAgB,SAASS,GACvBC,KAAKC,SAAS,CAACC,QAAQ,GAAD,mBAAMF,KAAKG,MAAMD,SAAjB,CAA0BH,OAChDK,KAFc,gBAHd,EAAKD,MAAQ,CAACE,YAAY,EAAOH,QAAS,IAHzB,E,4FAUnB,sBAAAI,EAAA,kEACCN,KADD,SACmCO,IAAMC,IAAI,eAD7C,sBAC6Db,KAD7D,2BACqE,EADrE,uBACgBU,WADhB,WACMJ,SADN,gE,0EAIA,WACE,OAAID,KAAKG,MAAME,WACN,sBAAKI,UAAW,OAAhB,UACL,cAAChC,EAAD,CAAUa,cAAeU,KAAKV,gBAC9B,qBAAKmB,UAAW,UAAhB,SACGT,KAAKG,MAAMD,aAIT,qBAAKO,UAAW,OAAhB,SACL,uBAAMC,OAAQ,SAAUC,OAAQ,OAAhC,UACE,uBAAOC,QAAS,WAAhB,sBACA,uBAAOC,GAAI,WAAYjB,KAAM,WAAYkB,KAAM,aAC/C,uBAAOA,KAAM,SAAUC,MAAO,qB,GA5BtBC,IAAMC,WCVTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1c3f4117.chunk.js","sourcesContent":["import './App.css';\nimport XHRUpload from \"@uppy/xhr-upload\";\nimport Uppy from \"@uppy/core\";\nimport {Dashboard, useUppy} from \"@uppy/react\";\nimport '@uppy/core/dist/style.css'\nimport '@uppy/dashboard/dist/style.css'\nimport axios from 'axios';\nimport React from 'react';\n\nfunction UppyUser(props) {\n  const uppy = useUppy(() => {\n    return new Uppy()\n        .use(XHRUpload, { endpoint: '/upload' })\n        .on(\"upload-success\", (file, response) => {\n          console.log(response);\n          props.historyAppend(<a target={\"_blank\"} rel={\"noreferrer noopener\"} href={\"/uploads/\" + response.body.data.name}>{response.body.data.name}</a>)\n        });\n  })\n\n  return <Dashboard theme={\"dark\"} uppy={uppy} />\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {isLoggedIn: false, history: []};\n  }\n\n  historyAppend = function(item) {\n    this.setState({history: [...this.state.history, item]});\n  }.bind(this);\n\n  async componentDidMount() {\n   this.setState({isLoggedIn: (await axios.get(\"/isloggedin\")).data || false});\n  }\n\n  render() {\n    if (this.state.isLoggedIn) {\n      return <div className={\"uppy\"}>\n        <UppyUser historyAppend={this.historyAppend} />\n        <div className={\"history\"}>\n          {this.state.history}\n        </div>\n      </div>;\n    } else {\n      return <div className={\"form\"}>\n        <form action={\"/login\"} method={\"post\"}>\n          <label htmlFor={\"password\"}>Password</label>\n          <input id={\"password\"} name={\"password\"} type={\"password\"} />\n          <input type={\"submit\"} value={\"Log In!\"} />\n        </form>\n      </div>\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}